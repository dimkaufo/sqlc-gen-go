// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: authors.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/sqlc-dev/sqlc-gen-go/example/sqlcout/entity"
)

const getAuthor = `-- name: GetAuthor :one
SELECT 
    a.id,
    a.name,
    a.age,
    b.id, b.title, b.author_id, b.published_at, b.created_at,
    r.id, r.book_id, r.rating, r.comment, r.reviewer_name, r.created_at,
    l.id, l.title, l.author_id, l.created_at
FROM authors a
LEFT JOIN books b ON b.author_id = a.id
LEFT JOIN labels l ON l.author_id = a.id
LEFT JOIN reviews r ON r.book_id = b.id
WHERE a.id = $1
ORDER BY b.title, r.created_at
LIMIT 1
`

type GetAuthorRow struct {
	ID     pgtype.UUID
	Name   string
	Age    int32
	Book   entity.Book
	Review entity.Review
	Label  entity.Label
}

func (q *Queries) GetAuthor(ctx context.Context, id pgtype.UUID) (*GetAuthorGroup, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i GetAuthorRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Book.ID,
		&i.Book.Title,
		&i.Book.AuthorID,
		&i.Book.PublishedAt,
		&i.Book.CreatedAt,
		&i.Review.ID,
		&i.Review.BookID,
		&i.Review.Rating,
		&i.Review.Comment,
		&i.Review.ReviewerName,
		&i.Review.CreatedAt,
		&i.Label.ID,
		&i.Label.Title,
		&i.Label.AuthorID,
		&i.Label.CreatedAt,
	)
	if err != nil {
		return nil, err
	}
	grouped := GroupGetAuthor([]*GetAuthorRow{&i})
	if len(grouped) == 0 {
		return nil, nil
	}
	return grouped[0], nil
}

const getAuthors = `-- name: GetAuthors :many
SELECT 
    a.id,
    a.name,
    a.age,
    b.id, b.title, b.author_id, b.published_at, b.created_at,
    r.id, r.book_id, r.rating, r.comment, r.reviewer_name, r.created_at,
    l.id, l.title, l.author_id, l.created_at
FROM authors a
LEFT JOIN books b ON b.author_id = a.id
LEFT JOIN labels l ON l.author_id = a.id
LEFT JOIN reviews r ON r.book_id = b.id
ORDER BY a.name, b.title, r.created_at
`

type GetAuthorsRow struct {
	ID     pgtype.UUID
	Name   string
	Age    int32
	Book   entity.Book
	Review entity.Review
	Label  entity.Label
}

func (q *Queries) GetAuthors(ctx context.Context) ([]*GetAuthorsGroup, error) {
	rows, err := q.db.Query(ctx, getAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAuthorsRow
	for rows.Next() {
		var i GetAuthorsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.Book.ID,
			&i.Book.Title,
			&i.Book.AuthorID,
			&i.Book.PublishedAt,
			&i.Book.CreatedAt,
			&i.Review.ID,
			&i.Review.BookID,
			&i.Review.Rating,
			&i.Review.Comment,
			&i.Review.ReviewerName,
			&i.Review.CreatedAt,
			&i.Label.ID,
			&i.Label.Title,
			&i.Label.AuthorID,
			&i.Label.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return GroupGetAuthors(items), nil
}

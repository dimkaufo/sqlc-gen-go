// Code generated by sqlc. DO NOT EDIT.

package query

import (
	"github.com/jackc/pgx/v5/pgtype"
)

// GetAuthorsGroup represents grouped data for GetAuthorsGroup
type GetAuthorsGroup struct {
	ID     pgtype.UUID
	Name   string
	Age    int32
	Books  []*GetAuthorsBook
	Labels []*GetAuthorsLabel
}

// GetAuthorsBook represents grouped data for GetAuthorsBook
type GetAuthorsBook struct {
	ID          pgtype.UUID
	Title       string
	AuthorID    pgtype.UUID
	PublishedAt pgtype.Date
	CreatedAt   pgtype.Timestamptz
	Reviews     []*GetAuthorsBookReview
}

// GetAuthorsBookReview represents grouped data for GetAuthorsBookReview
type GetAuthorsBookReview struct {
	ID           pgtype.UUID
	BookID       pgtype.UUID
	Rating       int32
	Comment      pgtype.Text
	ReviewerName pgtype.Text
	CreatedAt    pgtype.Timestamptz
}

// GetAuthorsLabel represents grouped data for GetAuthorsLabel
type GetAuthorsLabel struct {
	ID        pgtype.UUID
	Title     string
	AuthorID  pgtype.UUID
	CreatedAt pgtype.Timestamptz
}

// GroupGetAuthors groups flat GetAuthors rows into nested GetAuthorsGroup structures
func GroupGetAuthors(rows []*GetAuthorsRow) []*GetAuthorsGroup {
	getAuthorsGroupMap := make(map[pgtype.UUID]*GetAuthorsGroup)

	for _, r := range rows {
		getAuthorsGroup := getOrCreateGetAuthorsGroup(getAuthorsGroupMap, r)
		// Handle GetAuthorsBook nested relationship
		if r.Book.ID.Valid {
			book := getOrCreateGetAuthorsBook(getAuthorsGroup, r)
			// Handle GetAuthorsBookReview nested within Book
			if r.Review.ID.Valid {
				getOrCreateGetAuthorsBookReview(book, r)
			}
		}
		// Handle GetAuthorsLabel nested relationship
		if r.Label.ID.Valid {
			getOrCreateGetAuthorsLabel(getAuthorsGroup, r)
		}
	}
	var result []*GetAuthorsGroup
	for _, getAuthorsGroup := range getAuthorsGroupMap {
		result = append(result, getAuthorsGroup)
	}

	return result
}

// getOrCreateGetAuthorsGroup gets or creates a GetAuthorsGroup from the map
func getOrCreateGetAuthorsGroup(getAuthorsGroupMap map[pgtype.UUID]*GetAuthorsGroup, r *GetAuthorsRow) *GetAuthorsGroup {
	if getAuthorsGroup, exists := getAuthorsGroupMap[r.ID]; exists {
		return getAuthorsGroup
	}

	getAuthorsGroup := &GetAuthorsGroup{
		ID:   r.ID,
		Name: r.Name,
		Age:  r.Age,
	}
	getAuthorsGroupMap[r.ID] = getAuthorsGroup
	return getAuthorsGroup
}

// getOrCreateGetAuthorsBook gets or creates a GetAuthorsBook within the parent structure
func getOrCreateGetAuthorsBook(parent *GetAuthorsGroup, r *GetAuthorsRow) *GetAuthorsBook {
	// Check if GetAuthorsBook already exists in parent slice
	for i := range parent.Books {
		if parent.Books[i].ID == r.Book.ID {
			return parent.Books[i]
		}
	}

	// Create new GetAuthorsBook with auto-extracted field mapping
	newItem := &GetAuthorsBook{
		ID:          r.Book.ID,
		Title:       r.Book.Title,
		AuthorID:    r.Book.AuthorID,
		PublishedAt: r.Book.PublishedAt,
		CreatedAt:   r.Book.CreatedAt,
	}

	parent.Books = append(parent.Books, newItem)
	return newItem
}

// getOrCreateGetAuthorsBookReview gets or creates a GetAuthorsBookReview within the GetAuthorsBook structure
func getOrCreateGetAuthorsBookReview(parent *GetAuthorsBook, r *GetAuthorsRow) *GetAuthorsBookReview {
	// Check if GetAuthorsBookReview already exists in parent slice
	for i := range parent.Reviews {
		if parent.Reviews[i].ID == r.Review.ID {
			return parent.Reviews[i]
		}
	}

	// Create new GetAuthorsBookReview with auto-extracted field mapping
	newItem := &GetAuthorsBookReview{
		ID:           r.Review.ID,
		BookID:       r.Review.BookID,
		Rating:       r.Review.Rating,
		Comment:      r.Review.Comment,
		ReviewerName: r.Review.ReviewerName,
		CreatedAt:    r.Review.CreatedAt,
	}

	parent.Reviews = append(parent.Reviews, newItem)
	return newItem
}

// getOrCreateGetAuthorsLabel gets or creates a GetAuthorsLabel within the parent structure
func getOrCreateGetAuthorsLabel(parent *GetAuthorsGroup, r *GetAuthorsRow) *GetAuthorsLabel {
	// Check if GetAuthorsLabel already exists in parent slice
	for i := range parent.Labels {
		if parent.Labels[i].ID == r.Label.ID {
			return parent.Labels[i]
		}
	}

	// Create new GetAuthorsLabel with auto-extracted field mapping
	newItem := &GetAuthorsLabel{
		ID:        r.Label.ID,
		Title:     r.Label.Title,
		AuthorID:  r.Label.AuthorID,
		CreatedAt: r.Label.CreatedAt,
	}

	parent.Labels = append(parent.Labels, newItem)
	return newItem
}

// GetAuthorGroup represents grouped data for GetAuthorGroup
type GetAuthorGroup struct {
	ID     pgtype.UUID
	Name   string
	Age    int32
	Books  []*GetAuthorBook
	Labels []*GetAuthorLabel
}

// GetAuthorBook represents grouped data for GetAuthorBook
type GetAuthorBook struct {
	ID          pgtype.UUID
	Title       string
	AuthorID    pgtype.UUID
	PublishedAt pgtype.Date
	CreatedAt   pgtype.Timestamptz
	Reviews     []*GetAuthorBookReview
}

// GetAuthorBookReview represents grouped data for GetAuthorBookReview
type GetAuthorBookReview struct {
	ID           pgtype.UUID
	BookID       pgtype.UUID
	Rating       int32
	Comment      pgtype.Text
	ReviewerName pgtype.Text
	CreatedAt    pgtype.Timestamptz
}

// GetAuthorLabel represents grouped data for GetAuthorLabel
type GetAuthorLabel struct {
	ID        pgtype.UUID
	Title     string
	AuthorID  pgtype.UUID
	CreatedAt pgtype.Timestamptz
}

// GroupGetAuthor groups flat GetAuthor rows into nested GetAuthorGroup structures
func GroupGetAuthor(rows []*GetAuthorRow) []*GetAuthorGroup {
	getAuthorGroupMap := make(map[pgtype.UUID]*GetAuthorGroup)

	for _, r := range rows {
		getAuthorGroup := getOrCreateGetAuthorGroup(getAuthorGroupMap, r)
		// Handle GetAuthorBook nested relationship
		if r.Book.ID.Valid {
			book := getOrCreateGetAuthorBook(getAuthorGroup, r)
			// Handle GetAuthorBookReview nested within Book
			if r.Review.ID.Valid {
				getOrCreateGetAuthorBookReview(book, r)
			}
		}
		// Handle GetAuthorLabel nested relationship
		if r.Label.ID.Valid {
			getOrCreateGetAuthorLabel(getAuthorGroup, r)
		}
	}
	var result []*GetAuthorGroup
	for _, getAuthorGroup := range getAuthorGroupMap {
		result = append(result, getAuthorGroup)
	}

	return result
}

// getOrCreateGetAuthorGroup gets or creates a GetAuthorGroup from the map
func getOrCreateGetAuthorGroup(getAuthorGroupMap map[pgtype.UUID]*GetAuthorGroup, r *GetAuthorRow) *GetAuthorGroup {
	if getAuthorGroup, exists := getAuthorGroupMap[r.ID]; exists {
		return getAuthorGroup
	}

	getAuthorGroup := &GetAuthorGroup{
		ID:   r.ID,
		Name: r.Name,
		Age:  r.Age,
	}
	getAuthorGroupMap[r.ID] = getAuthorGroup
	return getAuthorGroup
}

// getOrCreateGetAuthorBook gets or creates a GetAuthorBook within the parent structure
func getOrCreateGetAuthorBook(parent *GetAuthorGroup, r *GetAuthorRow) *GetAuthorBook {
	// Check if GetAuthorBook already exists in parent slice
	for i := range parent.Books {
		if parent.Books[i].ID == r.Book.ID {
			return parent.Books[i]
		}
	}

	// Create new GetAuthorBook with auto-extracted field mapping
	newItem := &GetAuthorBook{
		ID:          r.Book.ID,
		Title:       r.Book.Title,
		AuthorID:    r.Book.AuthorID,
		PublishedAt: r.Book.PublishedAt,
		CreatedAt:   r.Book.CreatedAt,
	}

	parent.Books = append(parent.Books, newItem)
	return newItem
}

// getOrCreateGetAuthorBookReview gets or creates a GetAuthorBookReview within the GetAuthorBook structure
func getOrCreateGetAuthorBookReview(parent *GetAuthorBook, r *GetAuthorRow) *GetAuthorBookReview {
	// Check if GetAuthorBookReview already exists in parent slice
	for i := range parent.Reviews {
		if parent.Reviews[i].ID == r.Review.ID {
			return parent.Reviews[i]
		}
	}

	// Create new GetAuthorBookReview with auto-extracted field mapping
	newItem := &GetAuthorBookReview{
		ID:           r.Review.ID,
		BookID:       r.Review.BookID,
		Rating:       r.Review.Rating,
		Comment:      r.Review.Comment,
		ReviewerName: r.Review.ReviewerName,
		CreatedAt:    r.Review.CreatedAt,
	}

	parent.Reviews = append(parent.Reviews, newItem)
	return newItem
}

// getOrCreateGetAuthorLabel gets or creates a GetAuthorLabel within the parent structure
func getOrCreateGetAuthorLabel(parent *GetAuthorGroup, r *GetAuthorRow) *GetAuthorLabel {
	// Check if GetAuthorLabel already exists in parent slice
	for i := range parent.Labels {
		if parent.Labels[i].ID == r.Label.ID {
			return parent.Labels[i]
		}
	}

	// Create new GetAuthorLabel with auto-extracted field mapping
	newItem := &GetAuthorLabel{
		ID:        r.Label.ID,
		Title:     r.Label.Title,
		AuthorID:  r.Label.AuthorID,
		CreatedAt: r.Label.CreatedAt,
	}

	parent.Labels = append(parent.Labels, newItem)
	return newItem
}
